// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: messages.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO messages (
    id, 
    raw,
    created_at
) VALUES (
    DEFAULT, $1, NOW()
)
`

func (q *Queries) CreateMessage(ctx context.Context, raw pgtype.Text) error {
	_, err := q.db.Exec(ctx, createMessage, raw)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, raw, raw_jsonb, created_at FROM messages WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Raw,
		&i.RawJsonb,
		&i.CreatedAt,
	)
	return i, err
}

const getMessagesAsc = `-- name: GetMessagesAsc :many
SELECT id, raw, raw_jsonb, created_at FROM messages ORDER BY id ASC LIMIT $1 OFFSET $2
`

type GetMessagesAscParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetMessagesAsc(ctx context.Context, arg GetMessagesAscParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesAsc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Raw,
			&i.RawJsonb,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesDesc = `-- name: GetMessagesDesc :many
SELECT id, raw, raw_jsonb, created_at FROM messages ORDER BY id DESC LIMIT $1 OFFSET $2
`

type GetMessagesDescParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetMessagesDesc(ctx context.Context, arg GetMessagesDescParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesDesc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Raw,
			&i.RawJsonb,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
