// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sources.sql

package sqlc

import (
	"context"
	"net/netip"
)

const createSource = `-- name: CreateSource :exec
INSERT INTO sources (
    id,
    ip
) VALUES (
    DEFAULT, $1
)
`

func (q *Queries) CreateSource(ctx context.Context, ip netip.Addr) error {
	_, err := q.db.Exec(ctx, createSource, ip)
	return err
}

const getSources = `-- name: GetSources :many
SELECT id, ip FROM sources ORDER BY id DESC
`

func (q *Queries) GetSources(ctx context.Context) ([]Source, error) {
	rows, err := q.db.Query(ctx, getSources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Source
	for rows.Next() {
		var i Source
		if err := rows.Scan(&i.ID, &i.Ip); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
